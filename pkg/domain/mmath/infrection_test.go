package mmath

import (
	"reflect"
	"testing"
)

func TestFindInflectionFrames(t *testing.T) {
	tests := []struct {
		name       string
		frames     []float32
		values     []float64
		gThreshold float64
		vThreshold float64
		want       []float32
	}{
		{
			name:       "単調増加（変曲点なし）",
			frames:     []float32{1, 2, 3, 4, 5},
			values:     []float64{1, 2, 3, 4, 5},
			gThreshold: 1e-6,
			vThreshold: 10,
			want:       []float32{1, 5},
		},
		{
			name:       "同一値",
			frames:     []float32{1, 2, 3, 4, 5},
			values:     []float64{1, 1, 1, 1, 1},
			gThreshold: 1e-6,
			vThreshold: 10,
			want:       []float32{1, 5},
		},
		{
			name:       "変曲点あり",
			frames:     []float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			values:     []float64{1, 1, 1, 2, 2, 3, 3, 4, 2, 1},
			gThreshold: 1e-6,
			vThreshold: 10,
			want:       []float32{1, 8, 10},
		},
		{
			name:       "変曲点あり2",
			frames:     []float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			values:     []float64{1, 1, 5, 2, 2, 3, 8, 4, 2, 1},
			gThreshold: 1e-6,
			vThreshold: 10,
			want:       []float32{1, 4, 5, 8, 10},
		},
		{
			name:   "実値1",
			frames: []float32{80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99},
			values: []float64{
				0.00000000000001654822503314023, // 80
				0.00000000000003264784940820382, // 81
				0.0006195860461806958,           // 82
				0.003702762582628298,            // 83
				0.007285729066060613,            // 84
				0.010962595412529252,            // 85
				0.014994659166345459,            // 86
				0.018886739886832225,            // 87
				0.023014777566295438,            // 88
				0.02686273068667996,             // 89
				0.030373480273382013,            // 90
				0.03413745687672446,             // 91
				0.037860423851525424,            // 92
				0.041409676484680386,            // 93
				0.044506058787641196,            // 94
				0.046220958956129404,            // 95
				0.04400085151306907,             // 96
				0.03996070456395067,             // 97
				0.03416680567852725,             // 98
				0.02600231409467793,             // 99
			},
			gThreshold: 1e-6,
			vThreshold: 0.1,
			want:       []float32{80, 95, 99},
		},
		{
			name:   "実値2",
			frames: []float32{1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399},
			values: []float64{
				-0.5856121778488159, // 1380
				-0.7601110632809995, // 1381
				-0.9735882878303528, // 1382
				-1.2354776859283447, // 1383
				-1.5446218252182007, // 1384
				-1.9014798402786255, // 1385
				-2.3014144897460938, // 1386
				-2.7319881916046143, // 1387
				-3.171926736831665,  // 1388
				-3.5941598415374756, // 1389
				-3.970959186553955,  // 1390
				-4.281151294708252,  // 1391
				-4.516546726226807,  // 1392
				-4.677374362945557,  // 1393
				-4.769516122869997,  // 1394
				-4.798182487487793,  // 1395
				-4.774308468923836,  // 1396
				-4.695094108581543,  // 1397
				-4.5415239334106445, // 1398
				-4.291441917419434,  // 1399
			},
			gThreshold: 1e-6,
			vThreshold: 1,
			want:       []float32{1380, 1396, 1399},
		},
	}

	for n, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := FindInflectionFrames(tt.frames, tt.values, tt.gThreshold, tt.vThreshold)
			got = UniqueFloat32s(got)
			SortFloat32s(got)

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("[%d:%s] FindInflectionFrames() = %v, want %v", n, tt.name, got, tt.want)
			}
		})
	}
}
