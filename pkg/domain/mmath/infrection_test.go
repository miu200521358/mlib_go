package mmath

import (
	"reflect"
	"testing"
)

func TestFindInflectionFrames(t *testing.T) {
	tests := []struct {
		name   string
		frames []float32
		values []float64
		want   []float32
	}{
		{
			name:   "単調増加（変曲点なし）",
			frames: []float32{1, 2, 3, 4, 5},
			values: []float64{1, 2, 3, 4, 5},
			want:   []float32{1, 5},
		},
		{
			name:   "同一値（キーフレ間隔なし）",
			frames: []float32{1, 2, 3, 4, 5},
			values: []float64{1, 1, 1, 1, 1},
			want:   []float32{1, 5},
		},
		{
			name:   "同一値（キーフレ間隔あり）",
			frames: []float32{1, 5},
			values: []float64{1, 1},
			want:   []float32{1, 5},
		},
		{
			name:   "連続キーフレで変曲点あり",
			frames: []float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			values: []float64{1, 1, 1, 2, 2, 3, 3, 4, 2, 1},
			want:   []float32{1, 8, 10},
		},
		{
			name:   "連続キーフレで変曲点あり(実値)",
			frames: []float32{0, 66, 76, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99},
			values: []float64{
				1.11178779602051,
				1.06133091449738,
				1.02493703365326,
				1.02726900577545,
				1.04843544960022,
				1.0901597738266,
				1.11246883869171,
				1.13660180568695,
				1.16318047046661,
				1.19244527816772,
				1.22417831420898,
				1.25771021842957,
				1.29196047782898,
				1.32505214214325,
				1.40167546272278,
				1.41553795337677,
				1.42356109619141,
				1.38061332702637},
			want: []float32{0, 66, 76, 80, 82, 84, 92, 95, 97, 99},
		},
		{
			name:   "連続キーフレで変曲点あり(実値2)",
			frames: []float32{221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240},
			values: []float64{
				0.590624630451202,
				0.72147411108017,
				0.772224545478821,
				0.831091105937958,
				0.845010578632355,
				0.845653772354126,
				0.832224011421204,
				0.810672163963318,
				0.772909283638001,
				0.708946764469147,
				0.613838970661163,
				0.463264793157578,
				0.237470045685768,
				-0.0569061413407326,
				-0.391499549150467,
				-0.711163222789764,
				-0.97290176153183},
			want: []float32{221, 223, 224, 226, 227, 229, 240},
		},
		{
			name:   "連続キーフレで変曲点あり(実値3)",
			frames: []float32{383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411},
			values: []float64{
				0.927715480327606,
				0.850480079650879,
				0.775755405426025,
				0.707430601119995,
				0.656055212020874,
				0.628925383090973,
				0.629729270935059,
				0.641147613525391,
				0.648842334747315,
				0.650772213935852,
				0.648759484291077,
				0.647452652454376,
				0.655595123767853,
				0.677334487438202,
				0.694640040397644,
				0.710030615329742,
				0.718326389789581,
				0.723782002925873,
				0.731991052627564,
				0.745086073875427,
				0.75722461938858,
				0.768921256065369,
				0.792507171630859,
				0.833590924739838,
				0.874569952487946,
				0.908132076263428,
				0.928150951862335,
				0.941401958465576},
			want: []float32{383, 389, 392, 394, 398, 400, 411},
		},
	}

	for n, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := FindInflectionFrames(tt.frames, tt.values); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("[%d] FindInflectionFrames() = %v, want %v", n, got, tt.want)
			}
		})
	}
}
