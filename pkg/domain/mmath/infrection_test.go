package mmath

import (
	"reflect"
	"testing"
)

func TestFindInflectionFrames(t *testing.T) {
	tests := []struct {
		name      string
		frames    []float32
		values    []float64
		threshold float64
		want      []float32
	}{
		{
			name:      "単調増加（変曲点なし）",
			frames:    []float32{1, 2, 3, 4, 5},
			values:    []float64{1, 2, 3, 4, 5},
			threshold: 1e-3,
			want:      []float32{1, 5},
		},
		{
			name:      "同一値",
			frames:    []float32{1, 2, 3, 4, 5},
			values:    []float64{1, 1, 1, 1, 1},
			threshold: 1e-3,
			want:      []float32{1, 5},
		},
		{
			name:      "変曲点あり",
			frames:    []float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			values:    []float64{1, 1, 1, 2, 2, 3, 3, 4, 2, 1},
			threshold: 1e-3,
			want:      []float32{1, 8, 10},
		},
		{
			name:      "変曲点あり2",
			frames:    []float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			values:    []float64{1, 1, 5, 2, 2, 3, 8, 4, 2, 1},
			threshold: 1e-3,
			want:      []float32{1, 3, 7, 10},
		},
		{
			name:   "実値1",
			frames: []float32{80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99},
			values: []float64{
				0.00000000000001654822503314023, // 80
				0.00000000000003264784940820382, // 81
				0.0006195860461806958,           // 82
				0.003702762582628298,            // 83
				0.007285729066060613,            // 84
				0.010962595412529252,            // 85
				0.014994659166345459,            // 86
				0.018886739886832225,            // 87
				0.023014777566295438,            // 88
				0.02686273068667996,             // 89
				0.030373480273382013,            // 90
				0.03413745687672446,             // 91
				0.037860423851525424,            // 92
				0.041409676484680386,            // 93
				0.044506058787641196,            // 94
				0.046220958956129404,            // 95
				0.04400085151306907,             // 96
				0.03996070456395067,             // 97
				0.03416680567852725,             // 98
				0.02600231409467793,             // 99
			},
			threshold: 1e-3,
			want:      []float32{80, 95, 99},
		},
		{
			name:   "実値2",
			frames: []float32{1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399},
			values: []float64{
				-0.5856121778488159, // 1380
				-0.7601110632809995, // 1381
				-0.9735882878303528, // 1382
				-1.2354776859283447, // 1383
				-1.5446218252182007, // 1384
				-1.9014798402786255, // 1385
				-2.3014144897460938, // 1386
				-2.7319881916046143, // 1387
				-3.171926736831665,  // 1388
				-3.5941598415374756, // 1389
				-3.970959186553955,  // 1390
				-4.281151294708252,  // 1391
				-4.516546726226807,  // 1392
				-4.677374362945557,  // 1393
				-4.769516122869997,  // 1394
				-4.798182487487793,  // 1395
				-4.774308468923836,  // 1396
				-4.695094108581543,  // 1397
				-4.5415239334106445, // 1398
				-4.291441917419434,  // 1399
			},
			threshold: 1e-3,
			want:      []float32{1380, 1395, 1399},
		},
		{
			name: "Gimme グルーブY 5000-5200",
			frames: []float32{
				5000,
				5001,
				5002,
				5003,
				5004,
				5005,
				5006,
				5007,
				5008,
				5009,
				5010,
				5011,
				5012,
				5013,
				5014,
				5015,
				5016,
				5017,
				5018,
				5019,
				5020,
				5021,
				5022,
				5023,
				5024,
				5025,
				5026,
				5027,
				5028,
				5029,
				5030,
				5031,
				5032,
				5033,
				5034,
				5035,
				5036,
				5037,
				5038,
				5039,
				5040,
				5041,
				5042,
				5043,
				5044,
				5045,
				5046,
				5047,
				5048,
				5049,
				5050,
				5051,
				5052,
				5053,
				5054,
				5055,
				5056,
				5057,
				5058,
				5059,
				5060,
				5061,
				5062,
				5063,
				5064,
				5065,
				5066,
				5067,
				5068,
				5069,
				5070,
				5071,
				5072,
				5073,
				5074,
				5075,
				5076,
				5077,
				5078,
				5079,
				5080,
				5081,
				5082,
				5083,
				5084,
				5085,
				5086,
				5087,
				5088,
				5089,
				5090,
				5091,
				5092,
				5093,
				5094,
				5095,
				5096,
				5097,
				5098,
				5099,
			},
			values: []float64{
				-0.4040042757987976, // 5000
				-0.3235156536102295, // 5001
				-0.4015146791934967, // 5002
				-0.6149845123291016, // 5003
				-0.8857524991035461, // 5004
				-1.1625609397888184, // 5005
				-1.3886252641677856, // 5006
				-1.4845855236053467, // 5007
				-1.3100905418395996, // 5008
				-0.9731376985395988, // 5009
				-0.6401412487030029, // 5010
				-0.4604629576206207, // 5011
				-0.5278401374816895, // 5012
				-0.7035101015032745, // 5013
				-0.9133275747299194, // 5014
				-1.102813482284546,  // 5015
				-1.1918866634368896, // 5016
				-1.1297801127249125, // 5017
				-1.0070022344589233, // 5018
				-0.9363938570022583, // 5019
				-1.011193871498108,  // 5020
				-1.2059653997421265, // 5021
				-1.4531295793931231, // 5022
				-1.6704171895980835, // 5023
				-1.7712963819503784, // 5024
				-1.680954098701477,  // 5025
				-1.4512756442659052, // 5026
				-1.163185477256775,  // 5027
				-0.890701174736023,  // 5028
				-0.7609202265739441, // 5029
				-0.8809242659144049, // 5030
				-1.1306898593902588, // 5031
				-1.3849227543917526, // 5032
				-1.5261706113815308, // 5033
				-1.4041672945022583, // 5034
				-1.2811379432678223, // 5035
				-1.3036643615769754, // 5036
				-1.3630424737930298, // 5037
				-1.4375215768814087, // 5038
				-1.5062227249145508, // 5039
				-1.5491654589457524, // 5040
				-1.565456748008728,  // 5041
				-1.5215705171686669, // 5042
				-1.4022136926651,    // 5043
				-1.2610012292861938, // 5044
				-1.1197887659072876, // 5045
				-1.035691738128662,  // 5046
				-1.0298084020614624, // 5047
				-1.0955216161993448, // 5048
				-1.2818862199783325, // 5049
				-1.5036022663116455, // 5050
				-1.7633368968963623, // 5051
				-2.0205785983571642, // 5052
				-2.2746410369873047, // 5053
				-2.503432512283325,  // 5054
				-2.7026968002319336, // 5055
				-2.856358051300049,  // 5056
				-2.9573971886629598, // 5057
				-2.9919331073760986, // 5058
				-2.988189949204031,  // 5059
				-2.976719379425049,  // 5060
				-2.9413914680480957, // 5061
				-2.8861563205718994, // 5062
				-2.8110532760620117, // 5063
				-2.7123188972473145, // 5064
				-2.5965495109558105, // 5065
				-2.4881975650787354, // 5066
				-2.3616762161254883, // 5067
				-2.219980831021789,  // 5068
				-2.0623373985290527, // 5069
				-1.885549783706665,  // 5070
				-1.691116213798523,  // 5071
				-1.4829463958740234, // 5072
				-1.2714587450027466, // 5073
				-1.0677566528320312, // 5074
				-0.8839048147201538, // 5075
				-0.7383002638816833, // 5076
				-0.639082133769989,  // 5077
				-0.6046097278594971, // 5078
				-0.6248823404312134, // 5079
				-0.6717695593833923, // 5080
				-0.7546036243438721, // 5081
				-0.8722231984138489, // 5082
				-1.0150494000560242, // 5083
				-1.1683471202850342, // 5084
				-1.322858452796936,  // 5085
				-1.4631043672561646, // 5086
				-1.5923962866248849, // 5087
				-1.6968048810958862, // 5088
				-1.7734221784954305, // 5089
				-1.8192824245648764, // 5090
				-1.8344274759292603, // 5091
				-1.8256372213363647, // 5092
				-1.814303769234514,  // 5093
				-1.794765591621399,  // 5094
				-1.7781453132629395, // 5095
				-1.7561977075622413, // 5096
				-1.729029893875122,  // 5097
				-1.6949347257614136, // 5098
				-1.656809647303797,  // 5099
			},
			threshold: 1e-3,
			want:      []float32{5000, 5001, 5007, 5011, 5016, 5019, 5024, 5029, 5033, 5035, 5041, 5047, 5058, 5078, 5091, 5099},
		},
	}

	for n, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := FindInflectionFrames(tt.frames, tt.values, tt.threshold)
			got = Unique(got)
			Sort(got)

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("[%d:%s] FindInflectionFrames() = %v, want %v", n, tt.name, got, tt.want)
			}
		})
	}
}
